import asyncio
import html
from pathlib import Path

from aiogram import Bot, Dispatcher, Router
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, FSInputFile

# –ø–∞–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
BASE_DIR = Path(__file__).parent
TEMP_DIR = BASE_DIR / "data" / "temp"
TEMP_DIR.mkdir(parents=True, exist_ok=True)

# –≤–∞—à —Ç–æ–∫–µ–Ω
TOKEN = "7458983813:AAGTHcuK2O6uRYZm5FvfxVbtAGpwW_VAFDc"

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot    = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp     = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

# –∏–º–ø–æ—Ä—Ç –≤–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from convert.convert_doc   import convert_to_docx
from formatter.format_main import process_document

@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ .docx –∏–ª–∏ .doc —Ñ–∞–π–ª –æ—Ç—á—ë—Ç–∞ ‚Äî –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É—é –∏ –≤–µ—Ä–Ω—É –Ω–∞–∑–∞–¥."
    )

@router.message()
async def handle_docs(message: Message):
    if not message.document:
        return

    name = message.document.file_name or "document"
    ext  = name.lower().rsplit(".", 1)[-1]
    if ext not in ("docx", "doc"):
        return await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ .doc –∏–ª–∏ .docx.")

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
    raw_path = TEMP_DIR / name
    file     = await bot.get_file(message.document.file_id)
    await bot.download_file(file.file_path, destination=raw_path)

    # –µ—Å–ª–∏ .doc ‚Äî –∫–æ–Ω–≤–µ—Ä—Ç–∏–º
    if ext == "doc":
        try:
            raw_path = Path(convert_to_docx(str(raw_path)))
        except Exception as e:
            msg = html.escape(str(e))
            return await message.answer(
                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å .doc:\n<code>{msg}</code>",
                parse_mode="HTML"
            )

    # —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
    try:
        formatted_path = Path(process_document(str(raw_path)))
    except Exception as e:
        msg = html.escape(str(e))
        return await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:\n<code>{msg}</code>",
            parse_mode="HTML"
        )

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    await message.answer_document(
        document=FSInputFile(path=formatted_path, filename=formatted_path.name),
        caption="‚úÖ –í–æ—Ç —Ç–≤–æ–π –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á—ë—Ç!"
    )

async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –∂–¥—ë—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤‚Ä¶")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
